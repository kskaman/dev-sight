datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

///////////////////////////////
//  NextAuth (GitHub only)
///////////////////////////////
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts      Account[]
  sessions      Session[]

  chats         Chat[]               // ← your relation
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String   @default("oauth")
  provider           String   @default("github")
  providerAccountId  String   @map("provider_account_id")

  // token fields are optional but handy if you later call GitHub’s API
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {                     // stays empty while you use JWT sessions
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

///////////////////////////////
//  Chat application tables
///////////////////////////////
model Chat {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages  Message[]
  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])

  role      Role
  content   String

  parentId  String?   // for “edit a message” history
  parent    Message?  @relation("MsgParent", fields: [parentId], references: [id])
  children  Message[] @relation("MsgParent")

  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  @@map("messages")
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
}
